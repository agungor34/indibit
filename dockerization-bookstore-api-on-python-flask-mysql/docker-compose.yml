services:

  nginx:
    image: nginx:latest
    container_name:  nginx_reverse_proxy
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - app1
    networks:
      - frontnet

  app1:
    build:
      context: ./server
    # deploy:
    #   replicas: 5  # Varsayılan olarak 2 kopya
    # replicas: 5  # Varsayılan olarak 2 kopya
    # hostname: "flask_app-{{.Task.Slot}}"
    # container_name: "flask_app" -{{.Task.Slot}}"
    # ports:
    #   - "5002:5000"
    environment:
      - DATABASE_URL=mysql://root:Password@db/bookstore_db
    volumes:
      - ./server:/app
    expose:
      - 5000
    depends_on:
      - db
    networks:
      - backnet
      - frontnet

  db:
    image: mariadb:latest
    container_name: mysql_db
    #command: '--default-authentication-plugin=mysql_native_password'
    # restart: always
    # healthcheck:
    #   test: ['CMD-SHELL', 'mysqladmin ping -h 127.0.0.1 --password="$$(cat /run/secrets/db-password)" --silent']
#     root@8b1e0604095e:/# mariadb-admin ping -h localhost --user=root --password="Password" --silent
# mysqld is alive
    #   interval: 3s
    #   retries: 5
    #   start_period: 30s
    secrets:
      - db-password
    volumes:
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
      - mysql_data:/var/lib/mysql
      #- db-data:/var/lib/mysql
    networks:
      - backnet
    environment:
      - MYSQL_DATABASE=bookstore_db
      - MYSQL_ROOT_PASSWORD_FILE=/run/secrets/db-password
    expose:
      - 3306
      # - 33060

volumes:
  mysql_data:  # Volume tanımlaması burada
    driver: local
secrets:
  db-password:
    file: database/password.txt

networks:
  frontnet:
  backnet:



# services:
#   nginx:
#     image: nginx:latest
#     container_name: nginx_reverse_proxy
#     ports:
#       - "80:80"  # Reverse Proxy Port
#     volumes:
#       - ./nginx.conf:/etc/nginx/nginx.conf:ro  # Nginx yapılandırma dosyasını bağlama
#     depends_on:
#       - backend  # Backend servisini bekle
#     networks:
#       - app_network



# services:
#   nginx:
#     image: nginx:latest
#     container_name: nginx
#     ports:
#       - "80:80"
#     volumes:
#       - ./nginx/nginx.conf:/etc/nginx/nginx.conf
#     depends_on:
#       - app1
#       - app2
#     networks:
#       - frontnet

#   app2:
#     build:
#       context: ./app2
#     container_name: flask_app2
#     ports:
#       - "5002:5000"
#     environment:
#       - DATABASE_URL=mysql://root:password@db/flask_app
#     depends_on:
#       - db
#     networks:
#       - backnet
#       - frontnet

#   app1:
#     build:
#       context: ./app1
#     container_name: flask_app1
#     ports:
#       - "5001:5000"
#     environment:
#       - DATABASE_URL=mysql://root:password@db/flask_app
#     secrets:
#       - db-password
#     depends_on:
#       - db
#       # db:
#       #   condition: service_healthy
#     networks:
#       - backnet
#       - frontnet ####


